СТРУКТУРА ПРОГРАМИ

Найбільш поширеними мовами програмування для створення програмного забезпечення для операційних систем MacOS та iOS є С, С++, Objective-C та Swift. Поміж цих мов Swift є наймолодшою мовою програмування, що була розроблена компанією Apple і представлена у 2014 році.
Swift є багатопарадигмовою копільованою мовою програмування, що сформувалася під впливом Objective-C [1], проте включила в себе додаткові засоби оптимізації коду, автоматичного розподілу пам’яті, контролю переповнення змінних та масивів та інші важливі поліпшення [2]. Окрім цього, існують розгорнута документація,  активна спільнота розробників та доступні навчальні матеріали для даної мови, тож саме вона була обрана мовою програмування для даного проекту.
Даний проект побудований за шаблоном MVC (модель-представлення-контролер) – архітектурним шаблоном, що передбачає поділ програми на три взаємопов’язаних частини: модель даних, представлення (інтерфейс програми) та модуль керування.
Розглянемо компоненти MVC детальніше:
- модель – компонент, що відповідає за дані програми. Цей компонент містить в собі самі дані або робить запит на їх отримання, включає в себе їх методи обробки та реагує на запити з контролеру, повертаючи необхідні дані або змінюючи свій стан;
- представлення – компонент, що відповідає за відображення інформації та містить в собі логіку, пов’язану з цим відображенням;
- контролер – центральний компонент MVC, що забезпечує зв’язок між даними (моделлю) та представленням. Зазвичай цей компонент містить в собі логіку обробки користувацьких запитів та відображення представлення з даними, отриманими з моделі. [3]
Такий поділ компонентів програми дозволяє реалізувати концепцію розділення відповідальності, де кожен компонент виконує тільки задачі свого строго визначеного типу. Завдяки цьому полегшується робота над окремими модулями та частинами програми.

ПЕРЕЛІК І ПРИЗНАЧЕННЯ РЕЖИМІВ ТА СТРУКТУРА ДІАЛОГУ

Програма передбачає дві сторінки користувацького інтерфейсу, що поєднані між собою та передбачають перехід з однієї на іншу. 
Для переходу між сторінками в Swift використовується засіб зміни екранів, що називається Segue.
Segue – це графічний елемент у виді стрілки, що додається у файлі “Main.storyboard” між двома екранами і допомагає візуалізувати користувацький сценарій (user flow) програми. 
Для виклику Segue (наприклад, коли користувач натискає на кнопку або дані закінчують завантаження) використовується метод prepare(for:), що розміщується у котролері відповідного представлення. [5]
Розроблена програма містить два екрани: головний екран, що показується одразу після завантаження програми та екран рецепту, перехід до якого відбувається після натиснення на відповідне поле рецепту. Логіка переходу з головного екрану до екрану рецепту реалізована в модулі “RecipesController.swift”, що знаходиться в папці “Contollers”. 
Перехід з екрану рецепту назад до головного екрану відбувається після натиснення на кнопку “Back” в лівому верхньому куті екрану рецепту і реалізований автоматично. 
Меню користувача, що знаходиться в верхній полосі екрану, додається Xcode автоматично при створенні нового проекту і включає в себе базові опції для роботи з програмою. Ці опції обов’язкові для всіх програм операційної системи macOS і включають в себе основне підменю програми (RecipeApp), а також підменю File, Edit, Format, View, Window та Help.

СТРУКТУРА ДАНИХ ТА РЕСУРСІВ ПРОГРАМИ

При розробці програми було створено наступні класи та структури:

1. RecipesControler -  контролер, що відповідає за відображення інформації на головній сторінці програми. Даний клас отримує дані з глобального розширення (extension) Recipe.
В Swift розширення додають нову функціональність існуючому класу, структурі, перечисленню або протоколу. Це включає в себе можливість розширювати типи, до вихідних даних яких в програміста немає доступу. [7] В даному проекті розширення Recipe розширює однойменну структуру Recipe.
Клас включає в себе неконстанту змінну recipes, в яку записуються отримані з розширення Recipe дані, методи awakeFromNib(), tabkeView() та prepare().
Детальний опис методів класів знаходиться в наступному розділі. 

2. RecipeInfoViewController – контролер, що відповідає за відображення інформації на сторінці рецепту. Даний клас створює екземпляр структури Recipe, записує його у однойменну локальну змінну та передає дані для відображення на сторінці.
Для встановлення з’єднання між елементами програми, створеними графічно в файлі “Main.storyboard” та кодом програми, в Swift використовуються два типи маркерів: @IBAction та @IBOutlet. 
@IBAction використовується створення подій як результату взаємодії користувача та програми (наприклад, в результаті кліку на кнопку повинен відбутися перехід на іншу сторінку). [8]
В свою чергу, маркер @IBOutlet пов’язує графічний елемент з кодом і дозволяє змінювати його вигляд, передавати дані та взаємодіяти з компонентом програмно.
Клас RecipeInfoViewController містить маркери @IBOutlet: titleLabel (для назви рецепту), descriptionLabel (для опису рецепту), recipeLabel (для тексту рецепту), userRatingLabel (для оцінки користувача) та метод viewDidLoad() для відображення даних.

3. Recipe –  структура, що відповідає за дані програми. В Swift структури є простішим типом даним, аніж класи і використовуються за замовчуванням, якщо тільки не виникає потреби в використанні класів. [9]
Функціональність структури Recipe доповнюється однойменним розширенням. Розширення Recipe містить змінну recipesList, в яку записуються дані, отримані з файлу “recipes.plist” та метод loadVacationSpotsFromPlistNamed().

4. RecipeCell – клас, що відповідає за відображення комірки рецепту. Клас містить містить маркери @IBOutlet: nameLabel (для назви рецепту), descriptionLabel (для опису рецепту), thumbnailImageView (для зображення рецепту), та метод awakeFromNib() для програмного редагування вигляду комірки.
Різниця між методами awakeFromNib() та viewDidLoad() заключається в тому, що 
awakeFromNib() викликається після повного завантаження та ініціалізації даних елементу.

5. AppDelegate – клас, що відповідає за ініціалізацію та відображення всієї програми. Цей клас є створюється автоматично при створенні нового проекту в Xcode, проте може редагуватися програмістом в залежності від потреб конкретної програми.
Клас містить в собі змінну window, в яку записується екземпляр класу UIWindow(), методи application(), setApplicationColorTheme() (для зміни кольорової теми шапки програми) та RGB() (для створення типу даних UIColor, що необхідний для 
Дана програма не використовує динамічних даних. Для зберігання статичних даних програми використовується файл “recipes.plist”. 
Текстові файли, що мають розширення “.plist” (скорочено від Property List) є таблицями, що репрезентують дані відповідних асоціативних масивів. Для кожного значення повинні бути вказані ключ, тип та значення. 
Файл “recipes.plist” репрезентує масив асоціативних масивів, кожен з яких містить дані типів String та Number.

ОПИС ПРОГРАМИ

Розглянемо детальніше методи інтерфейсу основних класів програми:
- RecipesController.awakeFromNib() – призначений для присвоєння змінній recipes даних, отриманих із глобальної структури Recipe. На відміну від viewDidLoad(), метод викликається після повного завантаження та ініціалізації даних. Ключове слово override призначене для заміни однойменного методу за замовчуванням на даний метод.
- RecipesController.tableView() – призначений для програмного редагування комірки рецепту. Метод замінюється двічі. Перший метод приймає два параметри: tableView (тип даних - UITableView) та numbersOfRowsInSection (тип даних  - Int) та вертає кількість елементів в масиві recipes (тип даних – Int). Другий метод приймає два параметри: tableView (тип даних - UITableView) та cellsForRowAt (тип даних  - IndexPath) та вертає об’єкт, що репрезентує комірку списку рецертів (тип даних – IndexPath).
- RecipesController.prepare() – призначений для опису логіки переходу з головної сторінки на сторінку рецепту. Метод приймає два параметри: обов’язковий параметр segue (тип даних - UIStoryboardSegue) та опціональний параметр sender (довільний тип даних).
- RecipeInfoViewController.viewDidLoad() – призначений для програмного редагування сторінки рецепту та передачі даних для відображення.
- Recipe.loadRecipesFromPlistNamed() – призначений для завантаження масиву даних з файлу “recipes.plist” та збереження даних до константи dictArray. Метод приймає параметр plistName (тип даних - String) та повертає  масив екземплярів структури Recipe.
У випадку помилки метод зупиняє виконання програми та виводить повідомлення про помилку в консоль.
Після виконання умови метод ініціалізує змінну recipeItems та присвоює їй пустий масив. Після ініціалізації створюється цикл for … in, що перевіряє кожен елемент dict в масиві dictArray на відповідність типам даних, створює екземпляр Recipe та додає екземпляр в масив recipeItems. Якщо під час перевірки елементів не виконується умова, виконання програми завершується і в консоль виводиться відповідна помилка.
- Recipe.awakeFromNib() -  призначений для програмного редагування відображення компоненту RecipeCell. Метод додає елементу позиціонування.
- AppDelegate.application() – призначений для на внесення змін у відображення на етапі запуску програми. Метод приймає два параметри: application (тип даних - UIApplication) та launchOptions (масив даних довільного типу). Метод повертає значення типу Bool. Результат виконання методу залежить від результату виконання методу AppDelegate.setApplicationColorTheme().
- AppDelegate.setApplicationColorTheme() – призначений для зміни відображення шапки програми. Результат виконання методу залежить від результату виконання методу AppDelegate.RGB().
- AppDelegate.setApplicationColorTheme() – призначений для створення об’єкту типу UIColor. Метод приймає три обов’язкових параметри: r (тип даних - CGFloat), 
g (тип даних - CGFloat), b (тип даних - CGFloat) та вертає об’єкт типу UIColor.
Точкою входу в програму є метод main(), що імпортується з @UIApplicationMain в файлі “AppDelegate.swift”.
